import logging
import pprint
import yaml
import urllib.parse

class FabModule():
    """
    Definition of a generic Fab module
    """
    def __init__(self, source, **kwargs):
        self.source = source
        self.name = self.source
        for k in kwargs:
            setattr(self, k, kwargs[k])
        self.definition = {}
        if not self._read_definition():
            exit(2)
        if not self._validate_definition():
            logging.error('Definition YAML for {} is not valid.'.format(self.source))
            exit(1)

    def __str__(self):
        return(pprint.pformat(self.definition, indent=4))
    
    def _read_definition(self):
        parsed_source = urllib.parse.urlparse(self.source)
        logging.debug('Decoded source: {}'.format(parsed_source))
        if parsed_source.scheme == '' or parsed_source.scheme == 'file':
            # it's a simple file
            try:
                f = open(parsed_source.path, 'r')
            except Exception as err:
                logging.error('Could not open file {}: {}'.format(parsed_source.path, err))
                exit(1)
                return False
            self.definition = yaml.load(f, Loader=yaml.Loader)
            f.close()
        else:
            logging.error('Unknown scheme "{}" in {}'.format(parsed_source.scheme, self.source))
            return False
        return True

    def _validate_definition(self):
        is_valid = True
        if not 'metadata' in self.definition:
            logging.warning('No metadata found for module {}. Generating some.'.format(self.source))
            self.definition['metadata'] = {}
            self.definition['metadata']['name'] = self.source
            self.definition['metadata']['description'] = 'Autogenerated metadata'
        else:
            if not 'name' in self.definition['metadata']:
                logging.warning("No name set in module {}'s metadata. Autosetting to {}".format(self.name, self.name))
                self.definition['metadata']['name'] = self.name
            else:
                self.name = self.definition['metadata']['name']
            if not 'description' in self.definition['metadata']:
                logging.warning("No description set in module {}'s metadata. Autosetting".format(self.name))
                self.definition['metadata']['description'] = 'Autogenerated'
        
        if not 'containerfiles' in self.definition:
            logging.error("'containerfiles' missing from definition yaml for module {}".format(self.name))
            is_valid = False
        elif not type(self.definition['containerfiles']) == type(list()):
            logging.error("'containerfiles' is not a list")
            is_valid = False

        return(is_valid)
